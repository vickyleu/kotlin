/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See compiler/ir/ir.tree/tree-generator/ReadMe.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.ir.util

import org.jetbrains.kotlin.ir.symbols.*
import org.jetbrains.kotlin.ir.types.IrType

/**
 * Auto-generated by [org.jetbrains.kotlin.ir.generator.print.symbol.SymbolVisitorInterfacePrinter]
 */
interface SymbolVisitor : DeclaredSymbolVisitor, ReferencedSymbolVisitor {
    fun visitType(type: IrType)

    /**
     * Auto-generated by [org.jetbrains.kotlin.ir.generator.print.symbol.EmptySymbolVisitorPrinter]
     */
    open class Empty : SymbolVisitor {

        override fun visitDeclaredValueParameter(symbol: IrValueParameterSymbol) {} 

        override fun visitDeclaredClass(symbol: IrClassSymbol) {} 

        override fun visitDeclaredAnonymousInitializer(symbol: IrAnonymousInitializerSymbol) {} 

        override fun visitDeclaredTypeParameter(symbol: IrTypeParameterSymbol) {} 

        override fun visitDeclaredConstructor(symbol: IrConstructorSymbol) {} 

        override fun visitDeclaredEnumEntry(symbol: IrEnumEntrySymbol) {} 

        override fun visitDeclaredSimpleFunction(symbol: IrSimpleFunctionSymbol) {} 

        override fun visitDeclaredProperty(symbol: IrPropertySymbol) {} 

        override fun visitDeclaredField(symbol: IrFieldSymbol) {} 

        override fun visitDeclaredLocalDelegatedProperty(symbol: IrLocalDelegatedPropertySymbol) {} 

        override fun visitDeclaredScript(symbol: IrScriptSymbol) {} 

        override fun visitDeclaredReplSnippet(symbol: IrReplSnippetSymbol) {} 

        override fun visitDeclaredTypeAlias(symbol: IrTypeAliasSymbol) {} 

        override fun visitDeclaredVariable(symbol: IrVariableSymbol) {} 

        override fun visitDeclaredExternalPackageFragment(symbol: IrExternalPackageFragmentSymbol) {} 

        override fun visitDeclaredFile(symbol: IrFileSymbol) {} 

        override fun visitDeclaredReturnableBlock(symbol: IrReturnableBlockSymbol) {} 

        override fun visitReferencedClass(symbol: IrClassSymbol) {} 

        override fun visitReferencedProperty(symbol: IrPropertySymbol) {} 

        override fun visitReferencedScript(symbol: IrScriptSymbol) {} 

        override fun visitReferencedConstructor(symbol: IrConstructorSymbol) {} 

        override fun visitReferencedEnumEntry(symbol: IrEnumEntrySymbol) {} 

        override fun visitReferencedSimpleFunction(symbol: IrSimpleFunctionSymbol) {} 

        override fun visitReferencedField(symbol: IrFieldSymbol) {} 

        override fun visitReferencedLocalDelegatedProperty(symbol: IrLocalDelegatedPropertySymbol) {} 

        override fun visitReferencedVariable(symbol: IrVariableSymbol) {} 

        override fun visitReferencedTypeParameter(symbol: IrTypeParameterSymbol) {} 

        override fun visitReferencedReturnableBlock(symbol: IrReturnableBlockSymbol) {} 

        override fun visitReferencedValueParameter(symbol: IrValueParameterSymbol) {} 

        override fun visitReferencedTypeAlias(symbol: IrTypeAliasSymbol) {} 
        override fun visitType(type: IrType) {}
    }

    companion object {
        val EMPTY: SymbolVisitor = Empty()
    }
}
