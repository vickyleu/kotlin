/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See compiler/ir/ir.tree/tree-generator/ReadMe.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.ir.util

import org.jetbrains.kotlin.ir.symbols.*

/**
 * Auto-generated by [org.jetbrains.kotlin.ir.generator.print.symbol.ReferencedSymbolVisitorInterfacePrinter]
 */
interface ReferencedSymbolVisitor {

    fun visitReferencedClass(symbol: IrClassSymbol)

    fun visitReferencedProperty(symbol: IrPropertySymbol)

    fun visitReferencedScript(symbol: IrScriptSymbol)

    fun visitReferencedConstructor(symbol: IrConstructorSymbol)

    fun visitReferencedEnumEntry(symbol: IrEnumEntrySymbol)

    fun visitReferencedFunction(symbol: IrFunctionSymbol) {
        when (symbol) {
            is IrConstructorSymbol -> visitReferencedConstructor(symbol)
            is IrSimpleFunctionSymbol -> visitReferencedSimpleFunction(symbol)
        }
    }

    fun visitReferencedSimpleFunction(symbol: IrSimpleFunctionSymbol)

    fun visitReferencedField(symbol: IrFieldSymbol)

    fun visitReferencedLocalDelegatedProperty(symbol: IrLocalDelegatedPropertySymbol)

    fun visitReferencedVariable(symbol: IrVariableSymbol)

    fun visitReferencedDeclarationWithAccessors(symbol: IrDeclarationWithAccessorsSymbol) {
        when (symbol) {
            is IrPropertySymbol -> visitReferencedProperty(symbol)
            is IrLocalDelegatedPropertySymbol -> visitReferencedLocalDelegatedProperty(symbol)
        }
    }

    fun visitReferencedClassifier(symbol: IrClassifierSymbol) {
        when (symbol) {
            is IrClassSymbol -> visitReferencedClass(symbol)
            is IrScriptSymbol -> visitReferencedScript(symbol)
            is IrTypeParameterSymbol -> visitReferencedTypeParameter(symbol)
        }
    }

    fun visitReferencedTypeParameter(symbol: IrTypeParameterSymbol)

    fun visitReferencedReturnTarget(symbol: IrReturnTargetSymbol) {
        when (symbol) {
            is IrFunctionSymbol -> visitReferencedFunction(symbol)
            is IrReturnableBlockSymbol -> visitReferencedReturnableBlock(symbol)
        }
    }

    fun visitReferencedReturnableBlock(symbol: IrReturnableBlockSymbol)

    fun visitReferencedValue(symbol: IrValueSymbol) {
        when (symbol) {
            is IrValueParameterSymbol -> visitReferencedValueParameter(symbol)
            is IrVariableSymbol -> visitReferencedVariable(symbol)
        }
    }

    fun visitReferencedValueParameter(symbol: IrValueParameterSymbol)

    fun visitReferencedTypeAlias(symbol: IrTypeAliasSymbol)
}
