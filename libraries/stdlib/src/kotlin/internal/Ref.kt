/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package kotlin.internal

import kotlin.jvm.JvmField

/**
 * A collection of box classes that are used by the compiler for boxing variables captured in lambdas.
 */
@PublishedApi
@Suppress("unused") // Usages are generated by the compiler
internal class Ref private constructor() {

    @PublishedApi
    internal class ObjectRef<T : Any> @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: T? = null

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class ByteRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Byte = 0

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class ShortRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Short = 0

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class IntRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Int = 0

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class LongRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Long = 0

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class FloatRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Float = 0.0F

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class DoubleRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Double = 0.0

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class CharRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Char = '\u0000'

        override fun toString(): String = element.toString()
    }

    @PublishedApi
    internal class BooleanRef @PublishedApi internal constructor() : Serializable {
        @PublishedApi
        @JvmField
        internal var element: Boolean = false

        override fun toString(): String = element.toString()
    }
}